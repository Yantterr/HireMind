import { defineConfig, globalIgnores } from "eslint/config";
import { fixupConfigRules, fixupPluginRules } from "@eslint/compat";
import typescriptEslint from "@typescript-eslint/eslint-plugin";
import _import from "eslint-plugin-import";
import react from "eslint-plugin-react";
import reactHooks from "eslint-plugin-react-hooks";
import reactRefresh from "eslint-plugin-react-refresh";
import prettier from "eslint-plugin-prettier";
import globals from "globals";
import tsParser from "@typescript-eslint/parser";
import path from "node:path";
import { fileURLToPath } from "node:url";
import js from "@eslint/js";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const compat = new FlatCompat({
    baseDirectory: __dirname,
    recommendedConfig: js.configs.recommended,
    allConfig: js.configs.all
});

export default defineConfig([globalIgnores(["**/dist", "**/vite.config.ts"]), {
    extends: fixupConfigRules(compat.extends(
        "eslint:recommended",
        "plugin:@typescript-eslint/eslint-recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:react/recommended",
        "plugin:react-hooks/recommended",
        "plugin:import/recommended",
        "plugin:import/typescript",
        "prettier",
    )),

    plugins: {
        "@typescript-eslint": fixupPluginRules(typescriptEslint),
        import: fixupPluginRules(_import),
        react: fixupPluginRules(react),
        "react-hooks": fixupPluginRules(reactHooks),
        "react-refresh": reactRefresh,
        prettier,
    },

    languageOptions: {
        globals: {
            ...globals.browser,
        },

        parser: tsParser,
        ecmaVersion: 5,
        sourceType: "script",

        parserOptions: {
            project: true,
            tsconfigRootDir: "./",
        },
    },

    settings: {
        "import/parsers": {
            "@typescript-eslint/parser": [".ts", ".tsx"],
        },

        "import/resolver": {
            typescript: {
                alwaysTryTypes: true,
            },
        },
    },

    rules: {
        "@typescript-eslint/consistent-type-imports": [2, {
            fixStyle: "separate-type-imports",
        }],

        "@typescript-eslint/no-restricted-imports": [2, {
            paths: [{
                name: "react-redux",
                importNames: ["useSelector", "useStore", "useDispatch"],
                message: "Please use pre-typed versions from `src/app/hooks.ts` instead.",
            }],
        }],

        "prettier/prettier": ["warn", {
            endOfLine: "auto",
        }],

        "react-refresh/only-export-components": ["warn", {
            allowConstantExport: true,
        }],

        "react/jsx-uses-react": "off",
        "react/react-in-jsx-scope": "off",

        "import/order": ["error", {
            groups: ["builtin", "external", "internal"],

            pathGroups: [{
                pattern: "react, react-dom/**",
                group: "external",
                position: "before",
            }],

            pathGroupsExcludedImportTypes: ["react"],
            "newlines-between": "always",

            alphabetize: {
                order: "asc",
                caseInsensitive: true,
            },
        }],

        "import/no-default-export": "error",
        "import/no-unresolved": "error",
    },
}, {
    files: ["**/*.{c,m,}{t,j}s", "**/*.{t,j}sx"],
}, {
    files: ["**/*{test,spec}.{t,j}s?(x)"],

    languageOptions: {
        globals: {
            ...globals.jest,
        },
    },
}]);
